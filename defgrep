#!/bin/bash
FUNC=$1
NARGS=$2

# Options : 
# -l where to search     : Default "*.c"
# -n Number of args      : Default "unknown"
# -d Look for definition : Default look for calls

# Arguments :
# function name
while getopts :l:n:d opt # A is followed by ":" to say that it requires an argument. Leading ":" to let me handle invalid options instead of having an automatic error message.
do
	case $opt in
		l) 	SEARCH=$OPTARG
            option_l=true
			;;
		n) 	NARGS=$OPTARG
            option_n=true
			;;
	#	h)	showUsage
	#		exit 1
	#		;;
		d)	   option_d=true
         ;;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 1 ]; then
   echo "Must supply function name as argument"
fi

CHARS="[a-zA-Z_\-]"
echo "CHARS : $CHARS"
ARG_RE="\(\ *[[:alnum:]]\+\ *\)\{2,3\}"
TYPE_RE="$CHARS\+"
ARG_RE="\(\ *\(\ *$CHARS\+\ \)\?\ *$CHARS\+\**\ \+\**$CHARS\+\ *\)"

PARAM_RE="\(\ *[a-zA-Z_\-\&]\+\ *\)"
# ARG_RE="
# \(\ *
#    \(\ *$CHARS\+\ \)\?\ *
#    $CHARS\+\**\ \+
#    \**$CHARS\+
# \ *\)"

WORD_RE="\(\ *[[:alnum:]]\+\ *\)"

echo $NARGS
if [ $NARGS = "0" ];
then
   RE="$FUNC\ *(\ *)"
else
   NARGS=$(($NARGS - 1))
   DEF_RE_N="$TYPE_RE\ \+$FUNC\ *(\($ARG_RE,\)\{$NARGS\}$ARG_RE)" # Known number of args
   DEF_RE="$TYPE_RE\ \+$FUNC\ *(\($ARG_RE,\)*$ARG_RE\?)" # Unknown number of args
   RE_N="$FUNC\ *(\($PARAM_RE,\)\{$NARGS\}$PARAM_RE)"
   RE="$FUNC\ *(\($PARAM_RE,\)*$PARAM_RE\?)"
fi

grep "$RE" $3 --color -n
grep "$DEF_RE" $3 --color -n



